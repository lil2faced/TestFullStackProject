services:
  backend:
    build: ./Backend/WebAPI
    container_name: backend-api
    env_file:
      - .env
    ports:
      - "8080:8080"
      - "8081:8081"
    depends_on:
      - db
      - redis
      - rabbitmq
  frontend:
    build: ./Frontend
    container_name: frontend-build
  webserver:
    build: ./WebServer
    ports:
      - "7000:7000"  # Nginx теперь на 7000
    volumes:
      - ./frontend:/usr/share/nginx/html
    depends_on:
      - frontend
      - backend
  db:
    image: postgres:latest
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  redis:
    image: redis:latest
    container_name: redis-cache
    volumes:
      - redis_data:/data
  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq-broker
    env_file:
      - .env
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      - "15672:15672"  # Web-интерфейс
      - "5672:5672"    # AMQP порт
volumes:
  postgres_data:
  redis_data: